//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Q = thrift.Q;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const RpcProfile = module.exports.RpcProfile = function(args) {
    this.topic = null;
    this.payload = null;
    if (args) {
        if (args.topic !== undefined && args.topic !== null) {
            this.topic = args.topic;
        }
        if (args.payload !== undefined && args.payload !== null) {
            this.payload = args.payload;
        }
    }
};
RpcProfile.prototype = {};
RpcProfile.prototype.read = function(input) {
    input.readStructBegin();
    while (true) {
        const ret = input.readFieldBegin();
        const ftype = ret.ftype;
        const fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.topic = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.payload = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

RpcProfile.prototype.write = function(output) {
    output.writeStructBegin('RpcProfile');
    if (this.topic !== null && this.topic !== undefined) {
        output.writeFieldBegin('topic', Thrift.Type.STRING, 1);
        output.writeString(this.topic);
        output.writeFieldEnd();
    }
    if (this.payload !== null && this.payload !== undefined) {
        output.writeFieldBegin('payload', Thrift.Type.STRING, 2);
        output.writeString(this.payload);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

