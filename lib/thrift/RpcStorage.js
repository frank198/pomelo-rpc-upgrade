//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Q = thrift.Q;
const Int64 = require('node-int64');


const ttypes = require('./rpc_types');
//HELPER FUNCTIONS AND STRUCTURES

const RpcStorage_retrieve_args = function(args) {
    this.rpc = null;
    if (args) {
        if (args.rpc !== undefined && args.rpc !== null) {
            this.rpc = new ttypes.RpcProfile(args.rpc);
        }
    }
};
RpcStorage_retrieve_args.prototype = {};
RpcStorage_retrieve_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true) {
        const ret = input.readFieldBegin();
        const ftype = ret.ftype;
        const fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.rpc = new ttypes.RpcProfile();
                    this.rpc.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

RpcStorage_retrieve_args.prototype.write = function(output) {
    output.writeStructBegin('RpcStorage_retrieve_args');
    if (this.rpc !== null && this.rpc !== undefined) {
        output.writeFieldBegin('rpc', Thrift.Type.STRUCT, 1);
        this.rpc.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

const RpcStorage_retrieve_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.RpcProfile(args.success);
        }
    }
};
RpcStorage_retrieve_result.prototype = {};
RpcStorage_retrieve_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true) {
        const ret = input.readFieldBegin();
        const ftype = ret.ftype;
        const fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRUCT) {
                    this.success = new ttypes.RpcProfile();
                    this.success.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

RpcStorage_retrieve_result.prototype.write = function(output) {
    output.writeStructBegin('RpcStorage_retrieve_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

const RpcStorageClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RpcStorageClient.prototype = {};
RpcStorageClient.prototype.seqid = function() { return this._seqid; };
RpcStorageClient.prototype.new_seqid = function() { return this._seqid += 1; };

RpcStorageClient.prototype.retrieve = function(rpc, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        const _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_retrieve(rpc);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_retrieve(rpc);
    }
};

RpcStorageClient.prototype.send_retrieve = function(rpc) {
    const output = new this.pClass(this.output);
    const params = {
        rpc: rpc
    };
    const args = new RpcStorage_retrieve_args(params);
    try {
        output.writeMessageBegin('retrieve', Thrift.MessageType.CALL, this.seqid());
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
    }
    catch (e) {
        delete this._reqs[this.seqid()];
        if (typeof output.reset === 'function') {
            output.reset();
        }
        throw e;
    }
};

RpcStorageClient.prototype.recv_retrieve = function(input,mtype,rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        const x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    const result = new RpcStorage_retrieve_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('retrieve failed: unknown result');
};
const RpcStorageProcessor = exports.Processor = function(handler) {
    this._handler = handler;
};
RpcStorageProcessor.prototype.process = function(input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
    }
};
RpcStorageProcessor.prototype.process_retrieve = function(seqid, input, output) {
    const args = new RpcStorage_retrieve_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.retrieve.length === 1) {
        Q.fcall(this._handler.retrieve.bind(this._handler),
            args.rpc
        ).then(function(result) {
            const result_obj = new RpcStorage_retrieve_result({success: result});
            output.writeMessageBegin('retrieve', Thrift.MessageType.REPLY, seqid);
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        }).catch(function(err) {
            let result;
            result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin('retrieve', Thrift.MessageType.EXCEPTION, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    } else {
        this._handler.retrieve(args.rpc, function(err, result) {
            let result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new RpcStorage_retrieve_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin('retrieve', Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin('retrieve', Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
